from sympy.abc import x
from sympy.utilities.lambdify import lambdify
from tax_payments import tax

#inputs
starting = float(input('starting Amount '))
years = int(input('Trading Time Frame (years) '))

def monthly_rate_of_return_expression(monthly_return):
    """this function returns the formula for average rate of return per month
    to hit a certain goal value, over a certain period in years"""
    v = monthly_return
    t = starting*v #portfolio increase in year 1; where x is a factor (10% = 1.1 factor)
    annual_tax = 0.0
    for i in range(1,(years)*12):
        if i%12==0:
            t+=float(input('yearly addition for year '+str(int(i//12+1))+' '))
            t -= tax(t)
        t=t*v

    return t



monthly_factor = float(input('enter the monthly increase as a percent (ie 10)'))/100+1
y = monthly_rate_of_return_expression(monthly_factor)
print('your portfolio is valued at $',y, 'after taxes after', years, 'years.')
#switch sympy function to lambda function
#y = lambdify(x, expr)
#print outputs
#print()
#print('The formula to find monthly rate of return is: ', expr)
#print()
#



